import DrinkingUser from './CreateUserDb';
import { getDatabase, ref, get, push, onValue, remove, update } from "firebase/database";

export default class DrinkingUserManager {
    constructor(db) {
        this.db = db;
    }

    //* –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase - "–æ–¥–∏–Ω —Ä–∞–∑"
    fetchUserById(id) {
        const user = new DrinkingUser(id);
        // TODO –ó–∞–±–∏—Ä–∞—î —é–∑–µ—Ä–∞ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
        return get(ref(this.db, 'drinkingUser/' + `idUser:${id}`))
            .then((snapshot) => {
                if (snapshot.exists()) {
                    let dataDb = snapshot.val();
                    //TODO change 
                    let cocktails = dataDb.cocktails === undefined ? [] : dataDb.cocktails;
                    // dataDb ? (cocktails = Object.values(dataDb)) : (cocktails = false);
                    user.importCocktails(cocktails);
                    //TODO by ingredient
                    let ingredients = dataDb.ingredients === undefined ? [] : dataDb.ingredients;
                    user.importIngredients(ingredients);
                    user.setExistInDb();
                    return user;
                } else {
                    console.log("No data available");
                    // console.log(snapshot);
                    return user;
                }
            })
            .catch((error) => {
                console.log("error");
                // console.error(error);
            });
    }

    //* set data to db  –°—Ç–≤–æ—Ä—é—é —é–∑–µ—Ä–∞ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.
    pushUserById(user) {
        const id = user.getId();
        let dataDb = {};
        dataDb.cocktails = user.getFavoritesCocktails();
        dataDb.ingredients = user.getFavoritesIngredients();
        return push(ref(this.db, 'drinkingUser/' + `idUser:${id}`), dataDb)
            .then((response) => {
                console.log("üöÄ ~pushUserById .then console", response)
                // //TODO response.status
            })
            .catch((error) => {
                console.error(error);
            });
    }

    //* –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ Firebase –ø–æ –≤–µ–±—Å–æ–∫–µ—Ç–∞—Ö –ø–æ—Å—Ç—ñ–π–Ω–æ  - –°—á–∏—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    getDataFromFirebase(user) {
        const id = user.getId();
        const cocktails = ref(this.db, 'drinkingUser/' + id + '/cocktails');
        const ingredients = ref(this.db, 'drinkingUser/' + id + '/ingredients');
        onValue(cocktails, snapshot => {
            const dataDb = snapshot.val();
            dataDb ? (cocktails = Object.values(dataDb)) : [];
        });
        onValue(ingredients, snapshot => {
            const dataDb = snapshot.val();
            dataDb ? (ingredients = Object.values(dataDb)) : [];
        });
    }

    //* –ü—É—à–∏–º–æ —ñ–¥ –∫–æ–∫—Ç–µ–π–ª–∞ –≤ Firebase
    pushCocktailToDbByUserId(idCocktail, user) {
        try {
            const id = user.getId();
            const cocktails = ref(this.db, 'drinkingUser/' + id + '/cocktails');
            // dataDb.cocktails = user.addFavoriteCocktailById(idCocktail)
            // let cocktails = dataDb.cocktails;
            // user.importCocktails(cocktails);
            push(ref(this.db, 'drinkingUser/' + id + '/cocktails/'), idCocktail);
        } catch (error) {
            throw new Error("error.message")
        }
    }

    //* –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ –∑ Firebase
    deleteCocktailDbByUserId(idCocktail, user) {
        try {
            const id = user.getId();
            // dataDb.cocktails = user.deleteFavoriteCocktailById(idCocktail)
            // let cocktails = dataDb.cocktails === undefined ? [] : dataDb.cocktails;
            update(ref(this.db, 'drinkingUser/' + id + '/cocktails/'), dataDb);
            user.importCocktails(cocktails);
        } catch (error) {
            throw new Error("error.message")
        }
    }

    //* –ü—É—à–∏–º–æ —ñ–¥ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞ –≤ Firebase
    pushIngredientToDbByUserId(idIngredient, user) {
        try {
            const id = user.getId();
            dataDb.ingredients = user.addFavoriteIngredientById(idIngredient);
            let ingredients = dataDb.ingredients
            push(ref(this.db, 'drinkingUser/' + id + '/ingredients/'), idIngredient);
            user.importIngredients(ingredients);
        } catch (error) {
            throw new Error("error.message")
        }
    }

    //* –í–∏–¥–∞–ª—è—î–º–æ —ñ–¥ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞ –∑ Firebase
    deleteIngredientDbByUserId(idIngredient, user) {
        try {
            const id = user.getId();
            dataDb.ingredients = user.deleteFavoritesIngredientById(idIngredient);
            let ingredients = dataDb.ingredients === undefined ? [] : dataDb.ingredients;
            update(ref(this.db, 'drinkingUser/' + id + '/ingredients/'), idIngredient);
            user.importIngredients(ingredients);
        } catch (error) {
            throw new Error("error.message")
        }
    }
}